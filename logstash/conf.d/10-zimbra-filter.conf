input {
    beats {
        port => 5044
    }
}

filter {
    #### Filtro para log maillog [postfix]
    # /var/log/maillog
    # fields: {log_type: postfix}
    if ([fields][log_type] == "postfix") {
       grok {
            match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
            overwrite => [ "message" ]
        }
        date {
         match => [ "timestamp", "MMM  dd HH:mm:ss", "MMM  d HH:mm:ss" ]
         tag_on_failure => ["date_filter_failed"]
         target => "@timestamp"
        }
        mutate {
               rename => ["logsource", "hostname" ]
        }
        if [program] =~ /^postfix.*\/anvil$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_ANVIL}$" ]
            tag_on_failure => [ "_grok_postfix_anvil_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/bounce$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_BOUNCE}$" ]
            tag_on_failure => [ "_grok_postfix_bounce_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/cleanup$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_CLEANUP}$" ]
            tag_on_failure => [ "_grok_postfix_cleanup_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/dnsblog$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_DNSBLOG}$" ]
            tag_on_failure => [ "_grok_postfix_dnsblog_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/error$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_ERROR}$" ]
            tag_on_failure => [ "_grok_postfix_error_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/local$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_LOCAL}$" ]
            tag_on_failure => [ "_grok_postfix_local_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/master$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_MASTER}$" ]
            tag_on_failure => [ "_grok_postfix_master_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/pickup$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_PICKUP}$" ]
            tag_on_failure => [ "_grok_postfix_pickup_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/pipe$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_PIPE}$" ]
            tag_on_failure => [ "_grok_postfix_pipe_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postdrop$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_POSTDROP}$" ]
            tag_on_failure => [ "_grok_postfix_postdrop_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postscreen$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_POSTSCREEN}$" ]
            tag_on_failure => [ "_grok_postfix_postscreen_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/qmgr$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_QMGR}$" ]
            tag_on_failure => [ "_grok_postfix_qmgr_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/scache$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_SCACHE}$" ]
            tag_on_failure => [ "_grok_postfix_scache_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/sendmail$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_SENDMAIL}$" ]
            tag_on_failure => [ "_grok_postfix_sendmail_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/smtp$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_SMTP}$" ]
            tag_on_failure => [ "_grok_postfix_smtp_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/lmtp$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_LMTP}$" ]
            tag_on_failure => [ "_grok_postfix_lmtp_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/smtpd$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_SMTPD}$" ]
            tag_on_failure => [ "_grok_postfix_smtpd_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/postsuper$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_POSTSUPER}$" ]
            tag_on_failure => [ "_grok_postfix_postsuper_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/tlsmgr$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_TLSMGR}$" ]
            tag_on_failure => [ "_grok_postfix_tlsmgr_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/tlsproxy$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_TLSPROXY}$" ]
            tag_on_failure => [ "_grok_postfix_tlsproxy_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/trivial-rewrite$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_TRIVIAL_REWRITE}$" ]
            tag_on_failure => [ "_grok_postfix_trivial_rewrite_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/discard$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_DISCARD}$" ]
            tag_on_failure => [ "_grok_postfix_discard_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*\/virtual$/ {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => [ "message", "^%{POSTFIX_VIRTUAL}$" ]
            tag_on_failure => [ "_grok_postfix_virtual_nomatch" ]
            add_tag        => [ "_grok_postfix_success" ]
        }
    } else if [program] =~ /^postfix.*/ {
        mutate {
            add_tag => [ "_grok_postfix_program_nomatch" ]
        }
    }
    if [postfix_keyvalue_data] {
        kv {
            source       => "postfix_keyvalue_data"
            trim_value   => "<>,"
            prefix       => "postfix_"
            remove_field => [ "postfix_keyvalue_data" ]
        }
        if [postfix_client] {
            grok {
                patterns_dir   => "/etc/logstash/patterns"
                match          => ["postfix_client", "^%{POSTFIX_CLIENT_INFO}$"]
                tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
                remove_field   => [ "postfix_client" ]
            }
        }
        if [postfix_relay] {
            grok {
                patterns_dir   => "/etc/logstash/patterns"
                match          => ["postfix_relay", "^%{POSTFIX_RELAY_INFO}$"]
                tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
                remove_field   => [ "postfix_relay" ]
            }
        }
        if [postfix_delays] {
            grok {
                patterns_dir   => "/etc/logstash/patterns"
                match          => ["postfix_delays", "^%{POSTFIX_DELAYS}$"]
                tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
                remove_field   => [ "postfix_delays" ]
            }
        }
    }
    if [postfix_command_counter_data] {
        grok {
            patterns_dir   => "/etc/logstash/patterns"
            match          => ["postfix_command_counter_data", "^%{POSTFIX_COMMAND_COUNTER_DATA}$"]
            tag_on_failure => ["_grok_postfix_command_counter_data_nomatch"]
            remove_field   => ["postfix_command_counter_data"]
        }
    }
    mutate {
        convert => [
            "postfix_anvil_cache_size", "integer",
            "postfix_anvil_conn_count", "integer",
            "postfix_anvil_conn_rate", "integer",
            "postfix_client_port", "integer",
            "postfix_cmd_auth", "integer",
            "postfix_cmd_auth_accepted", "integer",
            "postfix_cmd_count", "integer",
            "postfix_cmd_count_accepted", "integer",
            "postfix_cmd_data", "integer",
            "postfix_cmd_data_accepted", "integer",
            "postfix_cmd_ehlo", "integer",
            "postfix_cmd_ehlo_accepted", "integer",
            "postfix_cmd_helo", "integer",
            "postfix_cmd_helo_accepted", "integer",
            "postfix_cmd_mail", "integer",
            "postfix_cmd_mail_accepted", "integer",
            "postfix_cmd_quit", "integer",
            "postfix_cmd_quit_accepted", "integer",
            "postfix_cmd_rcpt", "integer",
            "postfix_cmd_rcpt_accepted", "integer",
            "postfix_cmd_rset", "integer",
            "postfix_cmd_rset_accepted", "integer",
            "postfix_cmd_starttls", "integer",
            "postfix_cmd_starttls_accepted", "integer",
            "postfix_cmd_unknown", "integer",
            "postfix_cmd_unknown_accepted", "integer",
            "postfix_nrcpt", "integer",
            "postfix_postscreen_cache_dropped", "integer",
            "postfix_postscreen_cache_retained", "integer",
            "postfix_postscreen_dnsbl_rank", "integer",
            "postfix_relay_port", "integer",
            "postfix_server_port", "integer",
            "postfix_size", "integer",
            "postfix_status_code", "integer",
            "postfix_termination_signal", "integer",

            "postfix_delay", "float",
            "postfix_delay_before_qmgr", "float",
            "postfix_delay_conn_setup", "float",
            "postfix_delay_in_qmgr", "float",
            "postfix_delay_transmission", "float",
            "postfix_postscreen_violation_time", "float"
        ]
    }
    } ### fin de maillog postfix
    #### Filtro para log mailbox
    # /opt/zimbra/log/mailbox.log
    # fields: {log_type: mailbox}
    else if ([fields][log_type] == "mailbox") {
    ### general
      mutate { remove_field => ["host"] }

      if "beats_input_codec_plain_applied" in [tags] {
        mutate { remove_tag => ["beats_input_codec_plain_applied"] }
      }

  ### mailbox.log
    grok {
      match => { 'message' => "^%{TIMESTAMP_ISO8601:logtime} %{LOGLEVEL:loglevel}[[:space:]]*%{GREEDYDATA:message}$" }
      tag_on_failure => [ "_grok_mailbox_pipe_nomatch" ]
      add_tag        => [ "_grok_mailbox_success" ]
      overwrite => ["message"]
    }

    date {
      match => [ "logtime", "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
#      locale => "en_US"
      tag_on_failure => ["date_filter_failed"]
    }

    ### message count
    if "smtp - Sending message to" in [message] {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=%{ZIMBRA_USER:account};mid=[\d]*;(oip|ip)=%{IP:oip};port=[\d]*;ua=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*);\].*Message-ID=<(?<messageid>[\w$\.\@\-]*)>,.*sender=%{ZIMBRA_USER:sender}, nrcpts=(?<nrcpts>[\d]*),.*"}
        match => { 'message' => "^\[LmtpServer-[\d]*\] \[name=%{ZIMBRA_USER:account};mid=[\d]*;(oip|ip)=%{IP:oip};\].*Message-ID=<(?<messageid>[\w$\.\@\-]*)>,.*sender=%{ZIMBRA_USER:sender}, nrcpts=(?<nrcpts>[\d]*),.*" }
      }
      mutate {
        add_tag => [ "message_sent" ]
        convert => { "nrcpts" => "integer" }
      }
    } ### message count

    ### authentication failed
    if "authentication failed" in [message] {
      mutate { add_tag => [ "authentication_failed" ] }

      if "invalid password" in [message] {
        mutate { add_tag => [ "invalid_password" ] }
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=%{ZIMBRA_USER:account};(oip|ip)=%{IP:oip};ua=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*);\] %{ZIMBRA_SOAP_HANDLER} \[%{ZIMBRA_USER}\], invalid password$" }
        }
      }

      if "status is locked" in [message] {
        mutate {
          add_tag => [ "locked_attempts" ]
        }
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=%{ZIMBRA_USER:account};(oip|ip)=%{IP:oip}.*oproto=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*).*%{ZIMBRA_SOAP_HANDLER} \[.*status is locked$" }
          remove_tag => ["_grokparsefailure"]
          }
        }

      if "account not found" in [message] {
        mutate { add_tag => [ "account_not_found" ] }
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[(oip|ip)=%{IP:oip}.*oproto=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*);] SoapEngine - handler exception: authentication failed for \[%{ZIMBRA_USER}\], account not found$" }
          match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[(oip|ip)=%{IP:oip};ua=%{ZIMBRA_CLIENT:client};soapId(?<soapid>[^;]*);] %{ZIMBRA_SOAP_HANDLER} \[%{ZIMBRA_USER:account}], account not found$" }
        }
      }

      if "account lockout" in [message] {
        mutate { add_tag => [ "locked_account" ] }
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=(?<account>[^;]+);(oip|ip)=%{IP:oip};ua=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*);].*?((?<reason>(?=account lockout).*).*)?$" }
          match => { 'message' => "^\[name=(?<validated_account>[^;]*);oip=%{IP}.*oproto=(?<protocol>[^;]*).*soapId=(?<soapid>[^;]*).*\[(?<account>[^\]]*).*account lockout" }
        }
      }

      if "status is closed" in [message] {
        mutate { add_tag => [ "account_closed" ] }
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=%{ZIMBRA_USER:account};(oip|ip)=%{IP:oip};oport=[\d]*;oproto=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*);\].*%{ZIMBRA_SOAP_HANDLER} \[(%{ZIMBRA_USER}|[\w]*)\], account\(or domain\) status is closed$" }
          remove_tag => [ "_grokparsefailure"]
        }
      }
    } ### authentication failed

    if "suspended, for repeated failed login" in [message] {
      mutate { add_tag => ["suspended_ip"] }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP}[\s\[\]\w\-]*misc - Access from IP *%{IP:oip} suspended, for repeated failed login\.$" }
        remove_tag => [ "_grokparsefailure"]
      }
    } ### dos filter triggered

    ### overquota warnings
    if "LmtpServer" in [message] and "Over quota" in [message] {
      mutate { add_tag => ["over_quota"] }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^\[LmtpServer\-(?<lmtpserver_id>[\d]*)\]\s*\[name=(?<account>[^;]*).*" }
        remove_tag => [ "_grokparsefailure"]
      }
    } ### overquota warnings

    ### purge operations
    if "MailboxPurge" in [message] {
      mutate { add_tag => ["mailbox_purge"] }
      if "Purging messages" in [message] {
        mutate { add_tag => ["purging_message"] }
        grok {
          patterns_dir => ["/etc/logstash/patterns"]
          match => { 'message' => "^\[MailboxPurge\] \[name=(?<account>[^;]*)" }
        }
      }
    } ### purge operations

    if "DelegateAuth" in [message] and "delegated access" in [message] {
      mutate { add_tag => ["delegated_access"] }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=%{ZIMBRA_USER:account};(oip|ip)=%{IP:oip};port=[\d]*;ua=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*).*authenticated account=(?<authenticated_account>[^,]*).*target account=(?<target_account>[^;]*)$" }
        match => { 'message' => "^%{ZIMBRA_MAILBOX_ID_SOAP} \[name=%{ZIMBRA_USER:account};mid=[\d]*;(oip|ip)=%{IP:oip};port=[\d]*;ua=%{ZIMBRA_CLIENT:client};soapId=(?<soapid>[^;]*).*authenticated account=(?<authenticated_account>[^,]*).*target account=(?<target_account>[^;]*)$" }
        remove_tag => [ "_grokparsefailure"]
      }
    } ### delegated auths

    if "Junk-NotJunk-Handler" in [message] {
      mutate { add_tag => ["spam_reporting"] }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^\[Junk-NotJunk-Handler].*account=%{ZIMBRA_USER:account}.*isSpam=(?<spam>(true|false))" }
      }
     } ### spam reports
    } ### fin de mailbox


    # zimbra /var/log/zimbra.log (syslog format) usado para amavisd, clamd y opendkim.
    # /var/log/zimbra.log
    # fields: {log_type: zimbralog}
    else if ([fields][log_type] == "zimbralog") {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^%{CISCOTIMESTAMPTZ:logtime}\s%{IPORHOST:hostname}[[:space:]]*%{GREEDYDATA:message}$" }
        overwrite => ["message"]
      }
       date {
        match => [ "logtime", "MMM  dd HH:mm:ss", "MMM  d HH:mm:ss" ]
        tag_on_failure => ["date_filter_failed"]
        target => "@timestamp"
      }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^amavis\[[\d]*\]: \([\d\-]*\) (?<spam>(Passed SPAMMY|Blocked SPAM)).*\{(?<action>[\w]*)\},.*\[%{IPORHOST:ip}\]:(?<port>[\d]*).*<(?<sender>%{EMAILADDRESS})> -> <(?<receptor>%{EMAILADDRESS})>, Queue-ID: [\w]*, Message-ID: (?<messageid><[^>]*>), mail_id: (?<mailid>[\w]*),.*Hits: (?<Hits>[\d\.\d]*).*size: (?<size>[\d]*),.*$" }
        add_tag => ["spam"]
      }
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { 'message' => "^amavis\[[\d]*\]: \([\d\-]*\) (?<virus>Blocked INFECTED).*\((?<signature>.*)\).*\[%{IPORHOST:ip}\]:(?<port>[\d]*).*<(?<sender>%{EMAILADDRESS})> -> <(?<receptor>%{EMAILADDRESS})>, quarantine: %{EMAILADDRESS}, Queue-ID: [\w]*, Message-ID: (?<messageid><[^>]*>), mail_id: (?<mailid>[\w]*),.*Hits:.*(?<Hits>[\w,\-:\s]?).*size: (?<size>[\d]*),.*$" }
        add_tag => ["virus"]
      }
      mutate {
          convert => {
            "port" => "integer"
            "size" => "integer"
            "Hits" => "float"
          }
      }
    }### Fin de zimbra.log

    ### ossec
    else if([fields][log_type] == "osseclogs") {
      mutate {
        replace => {
          "[type]" => "osseclogs"
        }
      }
    }

}

output {
    if ([fields][log_type] == "zimbralog") {
        elasticsearch {
#           hosts => ["172.16.200.221:9200","172.16.200.222:9200"]
            hosts => ["https://172.16.100.1:9200","https://172.16.100.2:9200","https://172.16.100.5:9200"]
            ssl => true
            cacert => "/etc/logstash/ca.pem"
            user => "elastic"
            password => "elastic"
            index => "zimbralog-%{+YYYY.MM.dd}"
        }
    }
    else if ([fields][log_type] == "osseclogs") {
        elasticsearch {
#           hosts => ["172.16.200.221:9200","172.16.200.222:9200"]
            hosts => ["https://172.16.100.1:9200","https://172.16.100.2:9200","https://172.16.100.5:9200"]
            ssl => true
            cacert => "/etc/logstash/ca.pem"
            user => "elastic"
            password => "elastic"
            index => "ossecbeat-%{+YYYY.MM.dd}"
        }
    }
    else if ([fields][log_type] == "mailbox") {
        elasticsearch {
#           hosts => ["172.16.200.221:9200","172.16.200.222:9200"]
            hosts => ["https://172.16.100.1:9200","https://172.16.100.2:9200","https://172.16.100.5:9200"]
            ssl => true
            cacert => "/etc/logstash/ca.pem"
            user => "elastic"
            password => "elastic"
            index => "mailbox-%{+YYYY.MM.dd}"
        }
    }
    else if ([fields][log_type] == "postfix") {
        elasticsearch {
#           hosts => ["172.16.200.221:9200","172.16.200.222:9200"]
            hosts => ["https://172.16.100.1:9200","https://172.16.100.2:9200","https://172.16.100.5:9200"]
            ssl => true
            cacert => "/etc/logstash/ca.pem"
            user => "elastic"
            password => "elastic"
            index => "postfix-%{+YYYY.MM.dd}"
        }
    }
        stdout {
            codec => rubydebug
        }
}
